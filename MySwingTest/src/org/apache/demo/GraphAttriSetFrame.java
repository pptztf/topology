/*
 * GraphAttriSetFrame.java
 *
 * Created on __DATE__, __TIME__
 */

package org.apache.demo;

import java.io.File;

import javax.swing.AbstractListModel;
import javax.swing.ListSelectionModel;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import prefuse.Visualization;
import prefuse.data.Graph;
import prefuse.data.Table;
import prefuse.data.io.DataIOException;
import prefuse.data.io.GraphMLReader;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualGraph;

/**
 * 
 * @author __USER__
 */
public class GraphAttriSetFrame extends javax.swing.JFrame {

	private static Visualization visInstance = null;
	private static GraphAttriSetFrame gasFrame = null;
	private static File path = null;
	private String label = null;
	private static Boolean isDirected = null;
	private static MainFrame mainFrame;
	private static JackConfig config = null;

	/** Creates new form GraphAttriSetFrame */
	public GraphAttriSetFrame(File filePath) {
		initComponents();

		MyAbstractListModel malm = new MyAbstractListModel(filePath);
		graphAttriJList.setModel(malm);
		graphAttriJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		graphAttriJList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				config = JackConfig.getConfig();
				int sel = graphAttriJList.getSelectedIndex();
				if (sel >= 0) {
					graphAttriSubButton.setEnabled(true);
					String labeler = (String) graphAttriJList.getModel().getElementAt(sel);
					label = labeler;// 将获取的值传给外部类的成员
					config.setProperty("field.selected", labeler);
				} else {
					graphAttriSubButton.setEnabled(false);
				}
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		graphTypeLabel = new javax.swing.JLabel();
		isdirectComboBox = new javax.swing.JComboBox();
		graphAttriSubButton = new javax.swing.JButton();
		graphAttriQuitButton = new javax.swing.JButton();
		graphAttriLabel = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		graphAttriJList = new javax.swing.JList();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		graphTypeLabel.setText("\u56fe\u7684\u7c7b\u578b\uff1a");

		isdirectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "混合图", "无向图", "有向图" }));

		graphAttriSubButton.setText("\u786e\u5b9a");
		graphAttriSubButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graphAttriSubButtonActionPerformed(evt);
			}
		});

		graphAttriQuitButton.setText("\u53d6\u6d88");
		graphAttriQuitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				graphAttriQuitButtonActionPerformed(evt);
			}
		});

		graphAttriLabel.setText("\u56fe\u7684\u5c5e\u6027");

		graphAttriJList.setModel(new javax.swing.AbstractListModel() {
			String[] strings = { "123" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		jScrollPane1.setViewportView(graphAttriJList);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(34, 34, 34).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(graphAttriLabel).addComponent(graphTypeLabel)).addGap(18, 18, 18).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(isdirectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))).addGroup(jPanel1Layout.createSequentialGroup().addGap(235, 235, 235).addComponent(graphAttriSubButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(graphAttriQuitButton))).addContainerGap(67, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addComponent(isdirectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(jPanel1Layout.createSequentialGroup().addComponent(graphTypeLabel).addGap(18, 18, 18).addComponent(graphAttriLabel))).addGap(18, 18, 18).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(graphAttriSubButton).addComponent(graphAttriQuitButton)).addContainerGap(28, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	/**
	 * 确定按钮，完成数据载入以及呈现
	 */
	private void graphAttriSubButtonActionPerformed(java.awt.event.ActionEvent evt) {
		mainFrame.showItem(true);
		try {
			String item = (String) isdirectComboBox.getSelectedItem();
			
			if("有向图".equals(item)){
				isDirected = true;
			}else if("无向图".equals(item)){
				isDirected = false;
			}else{
				isDirected = null;
			}
			
			GraphUtils.loadData(path, isDirected);
			mainFrame.sendToJSplitPane(label);
		} catch (DataIOException e) {
			e.printStackTrace();
		}
		gasFrame.setVisible(false);
	}

	/**
	 * 取消按钮，关闭窗口
	 * 
	 * @param evt
	 */
	private void graphAttriQuitButtonActionPerformed(java.awt.event.ActionEvent evt) {
		gasFrame.setVisible(false);
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[], File filePath, MainFrame frame) {
		mainFrame = frame;
		UILib.setPlatformLookAndFeel();
		path = filePath;
		MyRunnable mr = new MyRunnable(filePath);
		java.awt.EventQueue.invokeLater(mr);
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JList graphAttriJList;
	private javax.swing.JLabel graphAttriLabel;
	private javax.swing.JButton graphAttriQuitButton;
	private javax.swing.JButton graphAttriSubButton;
	private javax.swing.JLabel graphTypeLabel;
	private javax.swing.JComboBox isdirectComboBox;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;

	// End of variables declaration//GEN-END:variables

	/**
	 * 继承AbstractListModel类的MyAbstractListModel，用于为JList赋值
	 */
	public class MyAbstractListModel extends AbstractListModel {

		String[] strings = null;

		public MyAbstractListModel(File filePath) {
			Graph g = null;
			try {
				g = new GraphMLReader().readGraph(filePath);
			} catch (DataIOException e) {
				e.printStackTrace();
			}
			// visInstance = new Visualization();

			Table t = g.getNodeTable();
			int cc = t.getColumnCount();
			strings = new String[cc];
			for (int i = 0; i < cc; ++i) {
				strings[i] = t.getColumnName(i);
			}
		}

		@Override
		public int getSize() {
			return strings.length;
		}

		@Override
		public Object getElementAt(int i) {
			return strings[i];
		}

	}

	/**
	 * 实现Runnable接口的MyRunnable类
	 * 
	 * @author Jack
	 * 
	 */
	public static class MyRunnable implements Runnable {

		private File filePath;

		public MyRunnable(File filePath) {
			this.filePath = filePath;
		}

		@Override
		public void run() {
			gasFrame = new GraphAttriSetFrame(filePath);
			gasFrame.setLocationRelativeTo(null);
			gasFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
			gasFrame.setVisible(true);

		}

	}

}